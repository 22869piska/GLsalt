//    glPolygonMode(GL_FRONT_AND_BACK,GL_LINE);
//    glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);


vecn: вектор nчисел с плавающей точкой по умолчанию.
bvecn: вектор nбулевых значений.
ivecn: вектор nцелых чисел.
uvecn: вектор nбеззнаковых целых чисел.
dvecn: вектор nдвойных компонент.


const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"void main()\n"
"{\n"
"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
"}\0";


const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor; \n"
"\n"
"void main()\n"
"{\n"
"	FragColor = vec4(1.0f, 1.0f, 0.2f, 1.0f); \n"
"}\0";
//

 //->nxt->






 //shader//

 /*
 unsigned int vertexshader;
 vertexshader = glCreateShader(GL_VERTEX_SHADER);
 glShaderSource(vertexshader, 1, &vertexShaderSource, 0);
 glCompileShader(vertexshader);

 //checkbug
 int  _truecompile;
 char infoLog[512];
 glGetShaderiv(vertexshader, GL_COMPILE_STATUS, &_truecompile);

 if (!_truecompile)
 {
	 glGetShaderInfoLog(vertexshader, 512, NULL, infoLog);
	 std::cout << "	VERTEX_SHADER_COMPILE_PIZDEC\n" << infoLog << std::endl;
 }



 //frag
 //newtest


 //end

 

 unsigned int fragmentShader;
 fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
 glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
 glCompileShader(fragmentShader);


 unsigned int shaderprogram;
 shaderprogram = glCreateProgram();

 glAttachShader(shaderprogram, vertexshader);
 glAttachShader(shaderprogram, fragmentShader);
 glLinkProgram(shaderprogram);

 glGetProgramiv(shaderprogram, GL_LINK_STATUS, &_truecompile);
 if (!_truecompile) {
	 glGetProgramInfoLog(shaderprogram, 512, NULL, infoLog);
	 std::cout << "	program__compile_PIZDEC\n" << infoLog << std::endl;
 }
 glUseProgram(shaderprogram);


 glDeleteShader(vertexshader);
 glDeleteShader(fragmentShader);

 */


 	0.5f, -0.5f, 0.0f,  1.0f, 0.0f, 0.0f,    // bottom right
	   -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,    // bottom left
		0.0f,  0.5f, 0.0f,  0.0f, 0.0f, 1.0f, //top